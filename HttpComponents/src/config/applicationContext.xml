<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
                           >
	
	
	<!-- 启动spring注解,当自动扫描启动后,该配置可以去掉 -->
	<context:annotation-config />
	
	<!-- 自动扫描 --> 
	<context:component-scan base-package="com.bobo.code" />
	
	<!-- 6. 不同环境之间切换配置文件,可以读取该配置文件的${test.jdbc.username}代表key去取value ,
			[1]. 在Spring的Bean定义中使用
			[2]. 也可用于Spring在java代码中的注解
	-->
	<context:property-placeholder location="classpath:/config/database/mysql_jdbc.properties" /> 
	
	<!--DataBase Configuration -->
	<!-- Spring的事务管理器有5个，都实现了PlatformTransactionManager接口 
		DataSourceTransactionManager        		 JDBC事务管理器 
		HibernateTransactionManager           		 Hibernate事务管理器 
		JdoTransactionManager                		  	 JDO事务管理器 
		JtaTransactionManager                  		 JTA事务管理器      
		PersistenceBrokerTransactionManager    Apache的OJB事务管理器 -->
	<!-- <bean id="dataSource"	class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${dataSource.driverClassName}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
	</bean> 

	<!-- 7. 配置myBatis客户端 -->
     <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">  
      	<property name="configLocation">
			<value>classpath:config/mybatis/sqlmap-config.xml</value>
        </property>  
        <property name="dataSource" ref="dataSource" />  
    </bean>

	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	
    
	<!-- 表示事务的开始策略。
		propagation="REQUIRED"  表示name的那个方法必须要在一个事务的环境中运行。
		read-only="true"  表示只读事务，就是不涉及到数据的修改，只是查询，这是对事务的优化。
	 -->
	<!-- 配置事务的传播特性 -->
	<!-- 8. 配置事务的传播特性 	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

  
  
	<!-- 10. 配置哪些类哪些方法使用事务<aop:pointcut id="allManagerMethod" expression="execution(* com.test.server.dao.*.impl.*(..))"/> -->
	<aop:config>
		<aop:pointcut 				 id="allManagerMethod"	 expression="execution(* com.bobo.code.service.impl.*.*(..))" />
		<aop:advisor  pointcut-ref="allManagerMethod" advice-ref = "txAdvice"/>
	</aop:config>


    












	
	<!-- 
	<import resource="classpath*:config/spring/dataSource.xml"/>
	<import resource="classpath*:config/spring/spring-bean.xml"/> -->
</beans>